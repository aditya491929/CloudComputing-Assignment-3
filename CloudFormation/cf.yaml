AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template for two Lambda functions, API Gateway, and
  two S3 buckets.

Resources:
  PhotosBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: photos-bucket-cf
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  PhotosBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref PhotosBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${PhotosBucket}/*

  FrontendBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: frontend-bucket-cf
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub arn:aws:s3:::${FrontendBucket}/*

  IndexPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: index-photos-CF
      Handler: index.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          ES_HOST : ""
          OPENSEARCH_PASSWORD : ""
          OPENSEARCH_USERNAME : ""
          REGION : "us-east-1"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          from datetime import *
          from opensearchpy import OpenSearch, RequestsHttpConnection
          ES_HOST = os.environ['ES_HOST']
          REGION = os.environ['REGION']
          es = OpenSearch(
              hosts = [{'host': ES_HOST, 'port': 443}],
              http_auth = (os.environ['OPENSEARCH_USERNAME'], os.environ['OPENSEARCH_PASSWORD']),
              port = 443,
              use_ssl = True,
              verify_certs = True,
              connection_class = RequestsHttpConnection
          )
          def get_url(index, type):
              url = ES_HOST + '/' + index + '/' + type
              return url
          def lambda_handler(event, context):
              print(f"S3 PUT EVENT : {json.dumps(event)}")
              print('testing')
              headers = { "Content-Type": "application/json" }
              rek = boto3.client('rekognition', region_name='us-east-1')
              s3 = boto3.client('s3')
              record = event['Records'][0]
              bucket = record['s3']['bucket']['name']
              key = record['s3']['object']['key']
              print(f'BUCKET: {bucket} ; KEY: {key}')
              # detect the labels of current image
              labels = rek.detect_labels(
                  Image={
                      'S3Object': {
                          'Bucket': bucket,
                          'Name': key
                      }
                  },
                  MaxLabels=10
              )
              metadata_response = s3.head_object(Bucket=bucket, Key=key)
              print(f'Metadata : {metadata_response}')
              custom_labels = metadata_response['Metadata'].get('customlabels', '')
              print(f'Custom Labels : {custom_labels}')
              custom_labels_list = custom_labels.split(',') if custom_labels else []
              print(f"IMAGE LABELS : {labels['Labels']}")
              obj = {}
              obj['objectKey'] = key
              obj["bucket"] = bucket
              obj["createdTimestamp"] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
              obj["labels"] = []
              for label in labels['Labels']:
                  obj["labels"].append(label['Name'])
              if len(custom_labels_list):
                  obj['labels'].extend(custom_labels_list)
              print(f"JSON OBJECT : {obj}")
              # post the JSON object into ElasticSearch, _id is automaticlly increased
              url = get_url('photos', 'Photo')
              print(f"ES URL : {url}")
              result = es.index(index="photos", body=obj)
              print(f"Success: {result}" )
              return {
                  'statusCode': 200,
                  'headers': {
                      "Access-Control-Allow-Origin": "*",
                      'Content-Type': 'application/json'
                  },
                  'body': json.dumps("Image labels have been successfully detected!")
              }

  LambdaInvokePermissionForS3:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref IndexPhotosFunction
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt PhotosBucket.Arn

  SearchPhotosFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: search-photos-CF
      Handler: search.handler
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          BOT_ALIAS : ""
          BOT_ID : ""
          OPENSEARCH_PASSWORD : ""
          OPENSEARCH_URL : ""
          OPENSEARCH_USERNAME : ""
          S3_URL : !Sub "https://s3.${AWS::Region}.amazonaws.com/${PhotosBucket}"
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          import requests
          from requests.auth import HTTPBasicAuth
          def push_to_lex(query):
              lex = boto3.client('lexv2-runtime', region_name='us-east-1')
              print("lex client initialized")
              response = lex.recognize_text(
                  botId= os.environ['BOT_ID'],
                  botAliasId= os.environ['BOT_ALIAS'],
                  localeId='en_US',
                  sessionId='user_lambda_search_photos',
                  text=query
              )
              print("lex-response", response)
              labels = []
              print(f"Next: {response['sessionState']['intent']['slots']}")
              if response['sessionState']['intent']['slots'] == None:
                  print(f"No photo collection for query {query}")
                  return []
              for key,value in response['sessionState']['intent']['slots'].items():
                  print (f"slot: {value}")
                  if value != None:
                      labels.append(value['value']['interpretedValue'])
              return labels
          def search_elastic_search(labels):
              print("Inside elastic search")
              region = 'us-east-1'
              service = 'es'
              url = os.environ['OPENSEARCH_URL']
              resp = []
              for label in labels:
                  if (label is not None) and label != '':
                      url2 = url+label
                      response = requests.get(url2, auth=HTTPBasicAuth(os.environ['OPENSEARCH_USERNAME'], os.environ['OPENSEARCH_PASSWORD'])).json()
                      resp.append(response)
              output = []
              for r in resp:
                  if 'hits' in r:
                      for val in r['hits']['hits']:
                          key = val['_source']['objectKey']
                          if key not in output:
                              output.append(f"{os.environ['S3_URL']}"+key)
              return output
          def lambda_handler(event, context):
              print(event)
              q = event['queryStringParameters']['q']
              print(q)
              labels = push_to_lex(q)
              print("labels", labels)
              img_paths = []
              if len(labels):
                  img_paths = search_elastic_search(labels)
              if len(img_paths) == 0:
                  return{
                      'statusCode':200,
                      'headers': {"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"*","Access-Control-Allow-Headers": "*"},
                      'body': json.dumps({
                          "message": "Success",
                          "data": img_paths
                      })
                  }
              else:
                  print(img_paths)
                  return{
                      'statusCode': 200,
                      'headers': {"Access-Control-Allow-Origin":"*","Access-Control-Allow-Methods":"*","Access-Control-Allow-Headers": "*"},
                      'body': json.dumps({
                          "message": "Success",
                          "data": img_paths
                      })
                  }

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: lambda-execution-role-CF
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - s3:GetObject
                  - s3:PutObject
                  - s3:ListBucket
                Resource: '*'

  APIGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: photo-search-api-CF

  PhotosResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: upload
      RestApiId: !Ref APIGateway

  SearchResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt APIGateway.RootResourceId
      PathPart: search
      RestApiId: !Ref APIGateway

  PutMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref PhotosResource
      HttpMethod: PUT
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: |
            {
              "statusCode": 200
            }
        IntegrationResponses:
          - StatusCode: 200
            ResponseTemplates:
              application/json: |
                {
                  "message": "Mock response"
                }

  GetMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref APIGateway
      ResourceId: !Ref SearchResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SearchPhotosFunction.Arn}/invocations

  Deployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - PutMethod
      - GetMethod
    Properties:
      RestApiId: !Ref APIGateway
      StageName: prod

Outputs:
  FrontendBucketURL:
    Description: URL of the static website hosted in the frontend bucket.
    Value: !Sub http://${FrontendBucket}.s3-website-${AWS::Region}.amazonaws.com
  PhotosBucketName:
    Description: Name of the S3 bucket for photos.
    Value: !Ref PhotosBucket